def handle_check_book(message):
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±—Ä–æ–Ω–∏"
    trainer_type = "example_type"  # –£–∫–∞–∂–∏—Ç–µ –∑–¥–µ—Å—å –Ω—É–∂–Ω—ã–π —Ç–∏–ø

    send_calendar(
        chat_id=message.chat.id,
        text=text,
        trainer_type=trainer_type,
        year=None,
        month=None,
        message_id=None  # message_id —Ç–µ–ø–µ—Ä—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    )

def send_calendar(chat_id, text, trainer_type, year=None, month=None, message_id=None):
    now = datetime.now()
    if year is None:
        year = now.year
    if month is None:
        month = now.month

    markup = InlineKeyboardMarkup()
    markup.row(InlineKeyboardButton(f'{calendar.month_name[month]} {year}', callback_data="calendar_ignore"))

    days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
    markup.row(*[InlineKeyboardButton(day, callback_data="calendar_ignore") for day in days])

    month_days = calendar.monthcalendar(year, month)
    for week in month_days:
        row = []
        for day in week:
            if day == 0:
                row.append(InlineKeyboardButton(" ", callback_data="calendar_ignore"))
            else:
                row.append(InlineKeyboardButton(str(day), callback_data=f"calendar_{year}-{month:02d}-{day:02d}_{trainer_type}"))
        markup.row(*row)

    markup.row(
        InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"calendar_prev_{year}_{month}_{trainer_type}"),
        InlineKeyboardButton("‚û°Ô∏è", callback_data=f"calendar_next_{year}_{month}_{trainer_type}")
    )

    btn_back = InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="throw")
    markup.add(btn_back)

    if message_id:
        try:
            bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=text, reply_markup=markup)
        except Exception as e:
            print(f"Error editing message: {e}")
            bot.send_message(chat_id=chat_id, text=text, reply_markup=markup)
    else:
        bot.send_message(chat_id=chat_id, text=text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("calendar_"))
def callback_calendar(call):
    parts = call.data.split("_")
    action = parts[1]

    if action == "ignore":
        return
    elif action == "prev":
        year = int(parts[2])
        month = int(parts[3]) - 1
        if month == 0:
            month = 12
            year -= 1
        bot.delete_message(call.message.chat.id, call.message.message_id)
        send_calendar(call.message.chat.id, "üóì –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å", parts[4], year, month,
                      message_id=call.message.message_id)

    elif action == "next":
        year = int(parts[2])
        month = int(parts[3]) + 1
        if month == 13:
            month = 1
            year += 1
        bot.delete_message(call.message.chat.id, call.message.message_id)
        send_calendar(call.message.chat.id, "üóì –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å", parts[4], year, month,
                      message_id=call.message.message_id)

    else:
        date_str = action
        trainer_type = parts[2]

        selected_date = datetime.strptime(date_str, "%Y-%m-%d")
        now = datetime.now()

        if selected_date.date() < now.date():
            bot.answer_callback_query(call.id, "‚ùå –≠—Ç–∞ –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.",
                                      show_alert=True)
            return

        # Process selected date here or call further functions based on trainer_type


def send_time_selection(chat_id, date_str, trainer_type, message_id=None):
    markup = InlineKeyboardMarkup()

    time_intervals_weekends = [
        "11:00-12:00", "12:00-13:00", "13:00-14:00",
        "14:00-15:00", "15:00-16:00", "16:00-17:00",
        "17:00-18:00", "18:00-19:00", "19:00-20:00",
        "20:00-21:00"
    ]

    time_intervals_weekdays = [
        "11:00-12:00", "12:00-13:00", "13:00-14:00",
        "14:00-15:00", "15:00-16:00", "16:00-17:00",
        "17:00-18:00", "18:00-19:00", "19:00-20:00"
    ]

    day_date = datetime.strptime(date_str, '%Y-%m-%d')
    day_name = day_date.strftime('%A')

    now = datetime.now()

    if day_date.date() == now.date():
        current_time = now.time()
    else:
        current_time = None

    if day_name in ["Saturday", "Sunday"]:
        time_intervals = time_intervals_weekends
    else:
        time_intervals = time_intervals_weekdays
    for t in time_intervals:
        start_time_str = t.split("-")[0]
        start_time = datetime.strptime(start_time_str, '%H:%M').time()
        if current_time and start_time <= current_time:
            markup.add(InlineKeyboardButton(f"{t} (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)", callback_data="calendar_ignore"))
        else:
            markup.add(InlineKeyboardButton(t, callback_data=f"time_{date_str}_{start_time_str}_{trainer_type}"))

    btn_back = InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="throw")
    markup.add(btn_back)

    bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                          text=f"üóì –í—ã –≤—ã–±—Ä–∞–ª–∏ {day_date.strftime('%d.%m.%Y')}. üîΩ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=markup)















def select_time_register(message):
    user_id = message.chat.id
    current_hour = datetime.now().hour  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å –Ω–∞ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: —Ç–µ–∫—É—â–∏–π —á–∞—Å –∏ –º–∏–Ω—É—Ç—ã
    user_time[user_id] = {'hour': current_hour, 'minute': 0}

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Å–∞
    sent_message = bot.send_message(
        message.chat.id,
        "–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ–ª—ë—Ç–∞ \n–£–∫–∞–∂–∏—Ç–µ —á–∞—Å",
        reply_markup=create_hour_keyboard(user_time[user_id]['hour'])
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –µ–≥–æ —É–¥–∞–ª–∏—Ç—å –ø–æ–∑–∂–µ
    user_time[user_id]['message_id'] = sent_message.message_id


def create_hour_keyboard(hour):
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Å–æ–≤"""
    keyboard = types.InlineKeyboardMarkup()

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è, —É–º–µ–Ω—å—à–µ–Ω–∏—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    add_five = types.InlineKeyboardButton(text="+5", callback_data="add_five_hour")
    add_one = types.InlineKeyboardButton(text="+1", callback_data="add_one_hour")
    hour_counter = types.InlineKeyboardButton(text=f"{hour:02d}", callback_data="hour_counter")
    minus_five = types.InlineKeyboardButton(text="-5", callback_data="minus_five_hour")
    minus_one = types.InlineKeyboardButton(text="-1", callback_data="minus_one_hour")
    confirm = types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_hour")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard.row(minus_five, hour_counter, add_five)
    keyboard.row(minus_one, confirm, add_one)

    return keyboard


def create_minute_keyboard(minute):
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∏–Ω—É—Ç"""
    keyboard = types.InlineKeyboardMarkup()

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è/—É–º–µ–Ω—å—à–µ–Ω–∏—è –Ω–∞ 5 –∏ 1 –º–∏–Ω—É—Ç—É, –∞ —Ç–∞–∫–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    add_five = types.InlineKeyboardButton(text="+5", callback_data="add_five_minute")
    add_one = types.InlineKeyboardButton(text="+1", callback_data="add_one_minute")
    minute_counter = types.InlineKeyboardButton(text=f"{minute:02d}", callback_data="minute_counter")
    minus_five = types.InlineKeyboardButton(text="-5", callback_data="minus_five_minute")
    minus_one = types.InlineKeyboardButton(text="-1", callback_data="minus_one_minute")
    confirm = types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_minute")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard.row(minus_five, minute_counter, add_five)
    keyboard.row(minus_one, confirm, add_one)

    return keyboard


@bot.callback_query_handler(
    func=lambda call: call.data in ["add_five_hour", "add_one_hour", "minus_five_hour", "minus_one_hour",
                                    "confirm_hour"])
def handle_hour_buttons(call):
    user_id = call.message.chat.id
    previous_hour = user_time[user_id]['hour']  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞, –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    if user_id not in user_time:
        user_time[user_id] = {'hour': datetime.now().hour, 'minute': 0}

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —á–∞—Å–æ–≤
    if call.data == "add_five_hour":
        user_time[user_id]['hour'] = (user_time[user_id]['hour'] + 5) % 24
    elif call.data == "add_one_hour":
        user_time[user_id]['hour'] = (user_time[user_id]['hour'] + 1) % 24
    elif call.data == "minus_five_hour":
        user_time[user_id]['hour'] = (user_time[user_id]['hour'] - 5) % 24 if user_time[user_id]['hour'] >= 5 else 0
    elif call.data == "minus_one_hour":
        user_time[user_id]['hour'] = (user_time[user_id]['hour'] - 1) % 24 if user_time[user_id]['hour'] > 0 else 0
    elif call.data == "confirm_hour":
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —á–∞—Å–∞
        bot.delete_message(call.message.chat.id, user_time[user_id]['message_id'])
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –º–∏–Ω—É—Ç
        sent_message = bot.send_message(call.message.chat.id, "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –º–∏–Ω—É—Ç—ã",
                                        reply_markup=create_minute_keyboard(user_time[user_id]['minute']))
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –º–∏–Ω—É—Ç
        user_time[user_id]['message_id'] = sent_message.message_id
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∞—Å–æ–≤, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ "message is not modified"
    if previous_hour != user_time[user_id]['hour']:
        bot.edit_message_reply_markup(
            call.message.chat.id,
            call.message.message_id,
            reply_markup=create_hour_keyboard(user_time[user_id]['hour'])
        )


@bot.callback_query_handler(
    func=lambda call: call.data in ["add_five_minute", "add_one_minute", "minus_five_minute", "minus_one_minute",
                                    "confirm_minute"])
def handle_minute_buttons(call):
    user_id = call.message.chat.id

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞, –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    if user_id not in user_time:
        user_time[user_id] = {'hour': datetime.now().hour, 'minute': 0}

    previous_minute = user_time[user_id]['minute']  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–∏–Ω—É—Ç
    if call.data == "add_five_minute":
        user_time[user_id]['minute'] = (user_time[user_id]['minute'] + 5) % 60
    elif call.data == "add_one_minute":
        user_time[user_id]['minute'] = (user_time[user_id]['minute'] + 1) % 60
    elif call.data == "minus_five_minute":
        user_time[user_id]['minute'] = (user_time[user_id]['minute'] - 5) % 60 if user_time[user_id][
                                                                                      'minute'] >= 5 else 0
    elif call.data == "minus_one_minute":
        user_time[user_id]['minute'] = (user_time[user_id]['minute'] - 1) % 60 if user_time[user_id][
                                                                                      'minute'] > 0 else 0
    elif call.data == "confirm_minute":
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –º–∏–Ω—É—Ç
        bot.delete_message(call.message.chat.id, user_time[user_id]['message_id'])
        bot.answer_callback_query(call.id,
                                  f"–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –≤—Ä–µ–º—è: {user_time[user_id]['hour']:02d}:{user_time[user_id]['minute']:02d}")
        bot.send_message(call.message.chat.id,
                         f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è –ø–æ–ª–µ—Ç–∞: {user_time[user_id]['hour']:02d}:{user_time[user_id]['minute']:02d}")
        flight_data['time'] = f"{user_time[user_id]['hour']:02d}:{user_time[user_id]['minute']:02d}"
        user_time.pop(user_id, None)  # –£–¥–∞–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ "message is not modified"
    if previous_minute != user_time[user_id]['minute']:
        bot.edit_message_reply_markup(
            call.message.chat.id,
            call.message.message_id,
            reply_markup=create_minute_keyboard(user_time[user_id]['minute'])
        )
